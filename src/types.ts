import type { Tables, TablesInsert, TablesUpdate } from "./db/database.types";

// #region Database Entities
/**
 * Represents the shape of a record in the `decks` table.
 */
export type Deck = Tables<"decks">;

/**
 * Represents the shape of a record in the `flashcards` table.
 */
export type Flashcard = Tables<"flashcards">;

/**
 * Represents the shape of a record in the `generations` table.
 */
export type Generation = Tables<"generations">;
// #endregion

// #region General DTOs
/**
 * Describes the pagination details for paginated API responses.
 */
export interface PaginationDto {
  currentPage: number;
  totalPages: number;
  totalItems: number;
}

/**
 * A generic type for paginated API responses.
 */
export interface PaginatedResponseDto<T> {
  data: T[];
  pagination: PaginationDto;
}
// #endregion

// #region Decks
/**
 * DTO for an item in a list of decks.
 * Includes a calculated `flashcardCount`.
 * Aliases `created_at` to `createdAt`.
 */
export type DeckListItemDto = Pick<Deck, "id" | "name"> & {
  createdAt: Deck["created_at"];
  flashcardCount: number;
};

/**
 * DTO for a paginated list of decks.
 */
export type PaginatedDecksDto = PaginatedResponseDto<DeckListItemDto>;

/**
 * DTO representing a deck, typically after creation.
 * It has the same shape as `DeckListItemDto`.
 */
export type DeckDto = DeckListItemDto;

/**
 * DTO for the detailed view of a deck, including its flashcards.
 * Aliases `created_at` to `createdAt`.
 */
export type DeckDetailsDto = Pick<Deck, "id" | "name"> & {
  createdAt: Deck["created_at"];
  flashcards: FlashcardSummaryDto[];
};
// #endregion

// #region Decks Command Models
/**
 * Command model for creating a new deck.
 * Requires only the `name`.
 */
export type CreateDeckCommand = Pick<TablesInsert<"decks">, "name">;

/**
 * Command model for updating a deck's name.
 */
export type UpdateDeckCommand = Pick<TablesUpdate<"decks">, "name">;
// #endregion

// #region Flashcards
/**
 * Represents the possible sources for a flashcard.
 */
export type FlashcardSource = "manual" | "ai-full" | "ai-edited";

/**
 * DTO for a flashcard summary, used within `DeckDetailsDto`.
 * Aliases `created_at` to `createdAt`.
 */
export type FlashcardSummaryDto = Pick<Flashcard, "id" | "front" | "back" | "source"> & {
  createdAt: Flashcard["created_at"];
};

/**
 * DTO for detailed flashcard information, returned after creation.
 * Aliases `deck_id` to `deckId` and `created_at` to `createdAt`.
 */
export type FlashcardDetailsDto = Pick<Flashcard, "id" | "front" | "back" | "source"> & {
  deckId: Flashcard["deck_id"];
  createdAt: Flashcard["created_at"];
};

/**
 * DTO for an updated flashcard.
 * Aliases `deck_id` to `deckId` and `updated_at` to `updatedAt`.
 */
export type UpdatedFlashcardDto = Pick<Flashcard, "id" | "front" | "back" | "source"> & {
  deckId: Flashcard["deck_id"];
  updatedAt: Flashcard["updated_at"];
};
// #endregion

// #region Flashcards Command Models
/**
 * Command model for creating a single flashcard.
 * Uses the specific `FlashcardSource` type for the `source` field.
 */
export type CreateFlashcardCommand = Pick<TablesInsert<"flashcards">, "front" | "back"> & {
  source: FlashcardSource;
};

/**
 * Command model for updating a flashcard.
 * Both `front` and `back` are optional.
 */
export type UpdateFlashcardCommand = Partial<Pick<TablesUpdate<"flashcards">, "front" | "back">>;
// #endregion

// #region AI Generation
/**
 * DTO for a flashcard candidate generated by the AI.
 * This is a temporary object and is not stored in the database.
 */
export type FlashcardCandidateDto = Pick<Flashcard, "front" | "back">;

/**
 * DTO for the response from the AI flashcard generation endpoint.
 */
export interface GenerateFlashcardsResponseDto {
  generationId: Generation["id"];
  candidates: FlashcardCandidateDto[];
}

/**
 * DTO for an item in the batch creation request for AI-generated flashcards.
 * `source` is limited to AI-related sources.
 */
export type BatchFlashcardItemDto = Pick<Flashcard, "front" | "back"> & {
  source: Extract<FlashcardSource, "ai-full" | "ai-edited">;
};

/**
 * DTO for the response of a batch flashcard creation.
 */
export interface BatchCreateFlashcardsResponseDto {
  createdCount: number;
  generationId: Generation["id"];
}
// #endregion

// #region AI Generation Command Models
/**
 * Command model for generating flashcards from source text.
 * Requires both the text and the ID of the deck to which the cards will be added.
 */
export interface GenerateFlashcardsCommand {
  sourceText: string;
  deckId: Deck["id"];
}

/**
 * Command model for batch-creating flashcards from AI suggestions.
 */
export interface BatchCreateFlashcardsCommand {
  generationId: Generation["id"];
  flashcards: BatchFlashcardItemDto[];
}
// #endregion

// #region AI Generation View Models
/**
 * Represents the status of a flashcard candidate in the UI.
 */
export type CandidateStatus = "pending" | "accepted" | "rejected";

/**
 * View model for a flashcard candidate with UI-specific properties.
 * Extends FlashcardCandidateDto with client-side tracking fields.
 */
export interface FlashcardCandidateViewModel extends FlashcardCandidateDto {
  id: string; // Unique client-side identifier (e.g., uuid v4)
  status: CandidateStatus; // Current status of the candidate
  isEdited: boolean; // Flag indicating if the candidate was modified by the user
}

/**
 * Represents the different steps in the flashcard generation process.
 */
export type GenerationStep = "input" | "loading" | "review" | "submitting" | "error";
// #endregion

// #region Layout and Navigation
/**
 * Represents a single item in the breadcrumbs navigation.
 */
export interface BreadcrumbItem {
  label: string; // Text label to display (e.g., "Moje Talie")
  href?: string; // Optional URL. The last item typically is not a link.
}
// #endregion
