---
import AppLayout from "@/layouts/AppLayout.astro";
import { DeckDetailsView } from "@/components/deck/DeckDetailsView";
import type { DeckDetailsDto } from "@/types";

export const prerender = false;

// Get authenticated user from locals (set by middleware)
const user = Astro.locals.user;

// Defense in depth - redirect if user is not authenticated
if (!user) {
  return Astro.redirect("/login");
}

const { deckId } = Astro.params;

// Basic validation - deckId should be present and be a valid UUID format
if (!deckId || typeof deckId !== "string") {
  return Astro.redirect("/app/decks");
}

const supabase = Astro.locals.supabase;

// Fetch deck details with flashcards
const { data: deck, error: deckError } = await supabase
  .from("decks")
  .select("id, name, created_at")
  .eq("id", deckId)
  .eq("user_id", user.id)
  .single();

if (deckError || !deck) {
  // Deck not found or doesn't belong to user - redirect to decks list
  return Astro.redirect("/app/decks");
}

// Fetch flashcards for this deck
const { data: flashcards, error: flashcardsError } = await supabase
  .from("flashcards")
  .select("id, front, back, source, created_at")
  .eq("deck_id", deckId)
  .order("created_at", { ascending: false });

if (flashcardsError) {
  return Astro.redirect("/app/decks");
}

// Transform data to match DeckDetailsDto
const initialData: DeckDetailsDto = {
  id: deck.id,
  name: deck.name,
  createdAt: deck.created_at,
  flashcards: (flashcards || []).map((fc) => ({
    id: fc.id,
    front: fc.front,
    back: fc.back,
    source: fc.source,
    createdAt: fc.created_at,
  })),
};

const pageTitle = `${deck.name} - Szczegóły talii`;
---

<AppLayout title={pageTitle} deckName={deck.name}>
  <DeckDetailsView client:load initialData={initialData} />
</AppLayout>
